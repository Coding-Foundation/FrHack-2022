version: "3.9"
services:
  postgres:
    image: postgres:9.6-alpine
    ports:
      - ${POSTGRES_EXPOSED_PORT:-5432}:5432 # custom
    networks:
      - postgres
    # environment: # default values
    #   POSTGRES_USER: user
    #   POSTGRES_DB: db
    #   POSTGRES_PASSWORD: password
    env_file:
      - ./env/postgres.env
    command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"] # log level verbose
    volumes:
      - postgres:/var/lib/postgresql/data

  lab:
    image: $REGISTRY/lab-frhack
    build: prep
    volumes:
      - ./clustering.ipynb:/opt/lab/clustering.ipynb
      - ./prep:/opt/lab/prep
    # environment:
    #   POSTGRES_USER: user
    #   POSTGRES_DB: db
    #   POSTGRES_PASSWORD: password
    #   POSTGRES_PORT: 5432
    #   POSTGRES_HOST: postgres
    env_file:
      - ./env/lab.env
    networks:
      - web
      - postgres
    labels:
      traefik.enable: "true"
      traefik.http.routers.lab.rule: Host(`lab.$DOMAIN_NAME`)
      traefik.http.routers.lab.entrypoints: websecure
      traefik.http.routers.lab.tls.certresolver: tls
      traefik.http.services.lab.loadbalancer.server.port: 8888
    deploy: # swarm
      labels:
        traefik.enable: "true"
        traefik.http.routers.lab.rule: Host(`lab.$DOMAIN_NAME`)
        traefik.http.routers.lab.entrypoints: websecure
        traefik.http.routers.lab.tls.certresolver: tls
        traefik.http.services.lab.loadbalancer.server.port: 8888

  pgweb:
    image: sosedoff/pgweb
    restart: unless-stopped
    # environment:
    #   DATABASE_URL: postgres://user:password@postgres:5432/db?sslmode=disable
    env_file:
      - ./env/pgweb.env
    networks:
      - web
      - postgres
    depends_on:
      - postgres
    labels:
      traefik.enable: "true"
      traefik.http.routers.pgweb.rule: Host(`db.$DOMAIN_NAME`)
      traefik.http.routers.pgweb.entrypoints: websecure
      traefik.http.routers.pgweb.tls.certresolver: tls
      traefik.http.services.pgweb.loadbalancer.server.port: 8081
    deploy:
      labels:
        traefik.enable: "true"
        traefik.http.routers.pgweb.rule: Host(`db.$DOMAIN_NAME`)
        traefik.http.routers.pgweb.entrypoints: websecure
        traefik.http.routers.pgweb.tls.certresolver: tls
        traefik.http.services.pgweb.loadbalancer.server.port: 8081
        # ldapAuth Register Middleware ====================================================
        # traefik.http.routers.pgweb.middlewares: ldap_auth

  api:
    image: $REGISTRY/api-frhack
    build: anfr-api
    networks:
      - web
      - postgres
    # environment:
    #   POSTGRES_USER: user
    #   POSTGRES_DB: db
    #   POSTGRES_PASSWORD: password
    #   POSTGRES_PORT: 5432
    #   POSTGRES_HOST: postgres
    env_file:
      - ./env/api.env
    volumes:
      - ./prep:/opt/anfr/prep
    labels:
      traefik.enable: "true"
      traefik.http.routers.api.rule: Host(`api.$DOMAIN_NAME`)
      traefik.http.routers.api.entrypoints: websecure
      traefik.http.routers.api.tls.certresolver: tls
      traefik.http.services.api.loadbalancer.server.port: 80
    deploy:
      labels:
        traefik.enable: "true"
        traefik.http.routers.api.rule: Host(`api.$DOMAIN_NAME`)
        traefik.http.routers.api.entrypoints: websecure
        traefik.http.routers.api.tls.certresolver: tls
        traefik.http.services.api.loadbalancer.server.port: 80

  front:
    image: $REGISTRY/front-frhack
    build: anfr-front
    # environment:
    #   API_URL: https://api.frhack.marcpartensky.com
    #   NODE_ENV: production
    #   PORT: 80
    env_file:
      - ./env/front.env
    networks:
      - web
    labels:
      traefik.enable: "true"
      traefik.http.routers.front.rule: Host(`$DOMAIN_NAME`)
      traefik.http.routers.front.entrypoints: websecure
      traefik.http.routers.front.tls.certresolver: tls
      traefik.http.services.front.loadbalancer.server.port: 80
    deploy:
      labels:
        traefik.enable: "true"
        traefik.http.routers.front.rule: Host(`$DOMAIN_NAME`)
        traefik.http.routers.front.entrypoints: websecure
        traefik.http.routers.front.tls.certresolver: tls
        traefik.http.services.front.loadbalancer.server.port: 80

  gitbook:
    image: marcpartensky/gitbook
    restart: unless-stopped
    volumes:
      - ./README.md:/opt/gitbook/book/README.md
    networks:
      - web
    labels:
      traefik.enable: "true"
      traefik.http.routers.gitbook.rule: Host(`book.$DOMAIN_NAME`)
      traefik.http.routers.gitbook.entrypoints: websecure
      traefik.http.routers.gitbook.tls.certresolver: tls
      traefik.http.services.gitbook.loadbalancer.server.port: 4000
    deploy:
      labels:
        traefik.enable: "true"
        traefik.http.routers.gitbook.rule: Host(`book.$DOMAIN_NAME`)
        traefik.http.routers.gitbook.entrypoints: websecure
        traefik.http.routers.gitbook.tls.certresolver: tls
        traefik.http.services.gitbook.loadbalancer.server.port: 4000

  traefik:
    image: traefik:latest
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
    networks:
      - web
    volumes:
      - ./traefik.yml:/traefik.yml # static configuration
      - traefik:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      traefik.enable: "true"
      traefik.http.routers.traefik.rule: Host(`traefik.$DOMAIN_NAME`)
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.entrypoints: websecure
      traefik.http.routers.traefik.tls.certresolver: tls
      traefik.docker.network: $NETWORK_NAME
    healthcheck:
      test: traefik healthcheck --ping
    deploy:
      placement:
        constraints:
          - node.role == manager
      # mode: global
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
        failure_action: rollback
      rollback_config:
        order: start-first
      labels:
        traefik.enable: "true"
        traefik.port: 8080
        traefik.http.services.traefik.loadbalancer.server.port: 8080
        traefik.http.routers.traefik.entrypoints: websecure
        traefik.http.routers.traefik.rule: Host(`traefik.$DOMAIN_NAME`)
        traefik.http.routers.traefik.tls.certresolver: tls

volumes:
  postgres:
  traefik:

networks:
  postgres:
  web:
    name: $NETWORK_NAME
    external: $NETWORK_EXTERNAL
